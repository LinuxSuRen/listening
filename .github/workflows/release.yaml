# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Maven Package

env:
  REGISTRY: ghcr.io
  REGISTRY_DOCKERHUB: docker.io
  REGISTRY_ALIYUN: registry.aliyuncs.com
  IMAGE_NAME: ${{ github.repository }}

on:
  release:
    types: [created]
  push:
    tags:
      - "*"
    branches:
      - master

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 20
        uses: actions/setup-java@v3
        with:
          java-version: '20'
          distribution: 'temurin'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Build with Maven
        run: |
          mvn -B test package --file pom.xml
          mvn -B test package --file pom.xml -Djavafx.platform=mac
          mvn -B test package --file pom.xml -Djavafx.platform=linux

      - name: Upload asset to release
        uses: csexton/release-asset-action@v3
        if: github.ref != 'refs/heads/master'
        with:
          files: |
            target/listening-gui.exe
            target/listening-0.0.1-SNAPSHOT-full-windows.jar
            target/listening-0.0.1-SNAPSHOT-full-mac.jar
            target/listening-0.0.1-SNAPSHOT-full-linux.jar
          github-token: ${{ secrets.GH_PUBLISH_SECRETS }}

      - name: Upload Coverage
        if: github.ref == 'refs/heads/master'
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
        run: |
          bash <(curl -Ls https://coverage.codacy.com/get.sh)

      - name: Publish to GitHub Packages Apache Maven
        run: |
          mvn deploy -s $GITHUB_WORKSPACE/settings.xml
        env:
          GITHUB_TOKEN: ${{ github.token }}

  image:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0
      - name: Set output
        id: vars
        run: echo "tag=$(git describe --tags)" >> $GITHUB_OUTPUT
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GH_PUBLISH_SECRETS }}
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: VERSION=${{ steps.vars.outputs.tag }}
